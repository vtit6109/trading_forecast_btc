# ==== Ph√¢n t√≠ch v√† d·ª± ƒëo√°n xu h∆∞·ªõng th·ªã tr∆∞·ªùng BTC/USDT ====
import os
import time
import requests
import pandas as pd
from dotenv import load_dotenv

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier  # Th√™m XGBoost

from indicators.rsi import calculate_rsi
from indicators.macd import calculate_macd
from indicators.pivot_points import calculate_pivot_points
from indicators.divergence import detect_divergence, add_divergence_signals  # Import t·ª´ divergence.py

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")
BINANCE_API_URL = os.getenv("BINANCE_API_URL")
FEAR_GREED_API_URL = os.getenv("FEAR_GREED_API_URL")
COINGECKO_API_URL = os.getenv("COINGECKO_API_URL")
NEWS_API_URL = os.getenv("NEWS_API_URL")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")


# ==== H√†m t·∫£i d·ªØ li·ªáu t·ª´ API ====
def fetch_data(pair):
    """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ API."""
    try:
        url = f"{BINANCE_API_URL}?symbol={pair.replace('/', '')}&interval=1h"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data, columns=[
                "timestamp", "open", "high", "low", "close", "volume", "close_time", "quote_asset_volume", 
                "number_of_trades", "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
            ])
            df = df[["timestamp", "open", "high", "low", "close", "volume"]]
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
            df.set_index("timestamp", inplace=True)
            df = df.astype(float)
            return df
        else:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Binance (HTTP {response.status_code}): {response.text}")
            return pd.DataFrame()
    except Exception as e:
        print(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

# ==== L·∫•y th√¥ng tin Fear and Greed ====
def fetch_fear_greed():
    """L·∫•y ch·ªâ s·ªë Fear and Greed t·ª´ API."""
    try:
        response = requests.get(FEAR_GREED_API_URL)
        if response.status_code == 200:
            data = response.json()["data"][0]
            return data["value"], data["value_classification"]
        else:
            print(f"L·ªói khi l·∫•y Fear and Greed (HTTP {response.status_code}): {response.text}")
            return None, None
    except Exception as e:
        print(f"L·ªói khi l·∫•y Fear and Greed: {e}")
        return None, None

# ==== L·∫•y th√¥ng tin th·ªã tr∆∞·ªùng ====
def fetch_market_data():
    """L·∫•y v·ªën h√≥a th·ªã tr∆∞·ªùng v√† kh·ªëi l∆∞·ª£ng giao d·ªãch t·ª´ API CoinGecko."""
    try:
        response = requests.get(COINGECKO_API_URL)
        if response.status_code == 200:
            data = response.json()["data"]
            market_cap = data["total_market_cap"]["usd"]
            volume = data["total_volume"]["usd"]
            return market_cap, volume
        else:
            print(f"L·ªói khi l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng (HTTP {response.status_code}): {response.text}")
            return None, None
    except Exception as e:
        print(f"L·ªói khi l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng: {e}")
        return None, None
    
# ==== L·∫•y tin t·ª©c li√™n quan ƒë·∫øn Bitcoin ====
def fetch_btc_news():
    """L·∫•y tin t·ª©c m·ªõi nh·∫•t li√™n quan ƒë·∫øn Bitcoin t·ª´ NewsAPI."""
    try:
        url = f"{NEWS_API_URL}?q=bitcoin&sortBy=publishedAt&apiKey={NEWS_API_KEY}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            articles = data.get("articles", [])
            news = [{"title": article["title"], "url": article["url"]} for article in articles[:5]]  # L·∫•y 5 tin t·ª©c ƒë·∫ßu ti√™n
            return news
        else:
            print(f"L·ªói khi l·∫•y tin t·ª©c Bitcoin (HTTP {response.status_code}): {response.text}")
            return []
    except Exception as e:
        print(f"L·ªói khi l·∫•y tin t·ª©c Bitcoin: {e}")
        return []
    
# ==== Chu·∫©n b·ªã d·ªØ li·ªáu ====
def prepare_data(data):
    """Th√™m c√°c ch·ªâ b√°o k·ªπ thu·∫≠t RSI, MACD v√† t√≠n hi·ªáu ph√¢n k·ª≥ v√†o d·ªØ li·ªáu."""
    try:
        data["RSI"] = calculate_rsi(data["close"], 14)
        data["MACD"], data["Signal"] = calculate_macd(data["close"])
        data = add_divergence_signals(data)  # Th√™m t√≠n hi·ªáu ph√¢n k·ª≥
        data.dropna(inplace=True)
        return data
    except Exception as e:
        print("L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu:", e)
        return pd.DataFrame()


# ==== Ph√¢n lo·∫°i xu h∆∞·ªõng ====
def classify_trend(rsi, macd, signal):
    """Ph√¢n lo·∫°i xu h∆∞·ªõng th√†nh TƒÉng, Gi·∫£m, ho·∫∑c T√≠ch l≈©y."""
    if abs(macd - signal) < 0.5 and 40 <= rsi <= 60:
        return "T√çCH L≈®Y ‚öñÔ∏è"
    elif macd > signal and rsi > 60:
        return "TƒÇNG üìà"
    elif macd < signal and rsi < 40:
        return "GI·∫¢M üìâ"
    else:
        return "T√çCH L≈®Y ‚öñÔ∏è"

# ==== G·ª≠i th√¥ng b√°o l√™n Discord ====
def send_analysis_to_discord(trend, price, rsi, macd, pivot_points, fear_greed, market_cap, volume, news, divergence):
    """G·ª≠i ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß l√™n Discord."""
    try:
        message = (
            f"üìà **Ph√¢n t√≠ch BTC/USDT (Khung th·ªùi gian: H1)** üìâ\n\n"
            f"**D·ª± B√°o Xu h∆∞·ªõng s·∫Øp t·ªõi:** {trend}\n"
            f"- Gi√° hi·ªán t·∫°i: {price} USDT\n\n"
            f"**Ch·ªâ b√°o k·ªπ thu·∫≠t:**\n"
            f"- RSI: {rsi:.2f}\n"
            f"- MACD: {macd:.2f}\n"
            f"- Pivot: {pivot_points[0]:.2f}\n"
            f"- Resistance 1: {pivot_points[1]:.2f}\n"
            f"- Support 1: {pivot_points[2]:.2f}\n"
            f"- Resistance 2: {pivot_points[3]:.2f}\n"
            f"- Support 2: {pivot_points[4]:.2f}\n\n"
            f"**Ch·ªâ s·ªë th·ªã tr∆∞·ªùng:**\n"
            f"- Fear and Greed: {fear_greed[0]} ({fear_greed[1]})\n"
            f"- V·ªën h√≥a th·ªã tr∆∞·ªùng: {market_cap / 1e9:.2f} t·ª∑ USD\n"
            f"- Kh·ªëi l∆∞·ª£ng giao d·ªãch 24h: {volume / 1e9:.2f} t·ª∑ USD\n\n"
            f"**T√≠n hi·ªáu ph√¢n k·ª≥:**\n"
            f"- {divergence}\n\n"
            f"**Tin t·ª©c quan tr·ªçng:**\n"
        )
        for item in news:
            message += f"- [{item['title']}]({item['url']})\n"

        # Th√™m c·∫£nh b√°o
        message += (
            "\n\n---\n"
            "‚ö†Ô∏è **BOT th·ª≠ nghi·ªám b·ªüi @VuThangIT** ‚ö†Ô∏è\n"
            "BOT n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t·ª± ƒë·ªông ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng BTC/USDT, "
            "ƒê∆∞a ra xu h∆∞·ªõng d·ª± ƒëo√°n d·ª±a tr√™n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t nh∆∞ RSI, MACD, v√† Pivot Points. "
            "Ngo√†i ra, BOT c√≤n cung c·∫•p th√¥ng tin ch·ªâ s·ªë Fear & Greed, v·ªën h√≥a th·ªã tr∆∞·ªùng, kh·ªëi l∆∞·ª£ng giao d·ªãch, "
            "v√† c√°c tin t·ª©c quan tr·ªçng m·ªõi nh·∫•t.\n"
            "H√£y l∆∞u √Ω, ƒë√¢y ch·ªâ l√† c√¥ng c·ª• h·ªó tr·ª£ tham kh·∫£o. "
            "C√¢n nh·∫Øc k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi ƒë·∫ßu t∆∞ v√† t√¨m ƒë·∫øn chuy√™n gia ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n."
        )

        response = requests.post(DISCORD_WEBHOOK_URL, json={"content": message})
        if response.status_code == 204:
            print("ƒê√£ g·ª≠i ph√¢n t√≠ch l√™n Discord.")
        else:
            print("L·ªói khi g·ª≠i ph√¢n t√≠ch:", response.status_code, response.text)
    except Exception as e:
        print("L·ªói khi g·ª≠i ph√¢n t√≠ch:", e)

# ==== Ch·∫°y d·ª± ƒëo√°n v√† th√¥ng b√°o ====
def predict_and_notify(model, pair):
    """D·ª± ƒëo√°n xu h∆∞·ªõng v√† g·ª≠i th√¥ng b√°o."""
    data = fetch_data(pair)
    if not data.empty:
        data = prepare_data(data)
        if not data.empty:
            latest_data = data.iloc[-1][["RSI", "MACD", "Signal", "Divergence"]].values
            rsi = data["RSI"].iloc[-1]
            macd = data["MACD"].iloc[-1]
            signal = data["Signal"].iloc[-1]
            divergence = data["Divergence"].iloc[-1] or "Kh√¥ng c√≥ ph√¢n k·ª≥"
            trend = classify_trend(rsi, macd, signal)
            price = data["close"].iloc[-1]
            pivot_points = calculate_pivot_points(data)
            fear_greed = fetch_fear_greed()
            market_cap, volume = fetch_market_data()
            news = fetch_btc_news()
            send_analysis_to_discord(trend, price, rsi, macd, pivot_points, fear_greed, market_cap, volume, news, divergence)
            
# ==== Main loop ====
if __name__ == "__main__":
    historical_data = fetch_data("BTC/USDT")
    processed_data = prepare_data(historical_data)

    # Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi XGBoost
    X = processed_data[["RSI", "MACD", "Signal"]]
    y = (processed_data["close"].shift(-1) > processed_data["close"]).astype(int)
    X_train, X_test, y_train, y_test = train_test_split(X[:-1], y[:-1], test_size=0.2, random_state=42)
    model = XGBClassifier(use_label_encoder=False, eval_metric="logloss").fit(X_train, y_train)
    print("Accuracy:", accuracy_score(y_test, model.predict(X_test)))

    while True:
        predict_and_notify(model, "BTC/USDT")
        time.sleep(3600)  # G·ª≠i m·ªói 1 ti·∫øng