# ==== Ph√¢n t√≠ch v√† d·ª± ƒëo√°n xu h∆∞·ªõng th·ªã tr∆∞·ªùng BTC/USDT ====
import os
import time
import requests
import pandas as pd
from dotenv import load_dotenv

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from xgboost import XGBClassifier

from indicators.rsi import calculate_rsi
from indicators.macd import calculate_macd
from indicators.pivot_points import calculate_pivot_points
from indicators.divergence import add_divergence_signals

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")
BINANCE_API_URL = os.getenv("BINANCE_API_URL")
FEAR_GREED_API_URL = os.getenv("FEAR_GREED_API_URL")
COINGECKO_API_URL = os.getenv("COINGECKO_API_URL")
NEWS_API_URL = os.getenv("NEWS_API_URL")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")


# ==== H√†m t·∫£i d·ªØ li·ªáu t·ª´ API ====
def fetch_data(pair, interval="1h"):
    """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ API v·ªõi khung th·ªùi gian t√πy ch·ªânh."""
    try:
        url = f"{BINANCE_API_URL}?symbol={pair.replace('/', '')}&interval={interval}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data, columns=[
                "timestamp", "open", "high", "low", "close", "volume", "close_time", 
                "quote_asset_volume", "number_of_trades", 
                "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
            ])
            df = df[["timestamp", "open", "high", "low", "close", "volume"]]
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
            df.set_index("timestamp", inplace=True)
            df = df.astype(float)
            return df
        else:
            print(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Binance (HTTP {response.status_code}): {response.text}")
            return pd.DataFrame()
    except Exception as e:
        print(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()


# ==== Chu·∫©n b·ªã d·ªØ li·ªáu ====
def prepare_data(data):
    """Th√™m c√°c ch·ªâ b√°o k·ªπ thu·∫≠t RSI, MACD v√† t√≠n hi·ªáu ph√¢n k·ª≥ v√†o d·ªØ li·ªáu."""
    try:
        data["RSI"] = calculate_rsi(data["close"], 14)
        data["MACD"], data["Signal"] = calculate_macd(data["close"])
        data = add_divergence_signals(data)  # Th√™m t√≠n hi·ªáu ph√¢n k·ª≥
        data.dropna(inplace=True)
        return data
    except Exception as e:
        print("L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu:", e)
        return pd.DataFrame()


# ==== Ph√¢n t√≠ch nhi·ªÅu khung th·ªùi gian ====
def analyze_multiple_timeframes(pair, intervals):
    """Ph√¢n t√≠ch nhi·ªÅu khung th·ªùi gian."""
    analysis_results = {}
    for interval in intervals:
        data = fetch_data(pair, interval)
        if not data.empty:
            prepared_data = prepare_data(data)
            if not prepared_data.empty:
                latest_data = prepared_data.iloc[-1]
                analysis_results[interval] = {
                    "RSI": latest_data["RSI"],
                    "MACD": latest_data["MACD"],
                    "Signal": latest_data["Signal"],
                    "Price": latest_data["close"],
                    "PivotPoints": calculate_pivot_points(prepared_data),
                }
    return analysis_results

# ==== Ph√¢n lo·∫°i xu h∆∞·ªõng ====
def classify_trend(rsi, macd, signal):
    """Ph√¢n lo·∫°i xu h∆∞·ªõng th√†nh TƒÉng, Gi·∫£m, ho·∫∑c T√≠ch l≈©y."""
    if abs(macd - signal) < 0.5 and 40 <= rsi <= 60:
        return "T√çCH L≈®Y ‚öñÔ∏è"
    elif macd > signal and rsi > 60:
        return "TƒÇNG üìà"
    elif macd < signal and rsi < 40:
        return "GI·∫¢M üìâ"
    else:
        return "T√çCH L≈®Y ‚öñÔ∏è"
    
# ==== L·∫•y th√¥ng tin Fear and Greed ====
def fetch_fear_greed():
    """L·∫•y ch·ªâ s·ªë Fear and Greed t·ª´ API."""
    try:
        response = requests.get(FEAR_GREED_API_URL)
        if response.status_code == 200:
            data = response.json()["data"][0]
            return data["value"], data["value_classification"]
        else:
            print(f"L·ªói khi l·∫•y Fear and Greed (HTTP {response.status_code}): {response.text}")
            return None, None
    except Exception as e:
        print(f"L·ªói khi l·∫•y Fear and Greed: {e}")
        return None, None

# ==== L·∫•y th√¥ng tin th·ªã tr∆∞·ªùng ====
def fetch_market_data():
    """L·∫•y v·ªën h√≥a th·ªã tr∆∞·ªùng v√† kh·ªëi l∆∞·ª£ng giao d·ªãch t·ª´ API CoinGecko."""
    try:
        response = requests.get(COINGECKO_API_URL)
        if response.status_code == 200:
            data = response.json()["data"]
            market_cap = data["total_market_cap"]["usd"]
            volume = data["total_volume"]["usd"]
            return market_cap, volume
        else:
            print(f"L·ªói khi l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng (HTTP {response.status_code}): {response.text}")
            return None, None
    except Exception as e:
        print(f"L·ªói khi l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng: {e}")
        return None, None

# ==== L·∫•y tin t·ª©c li√™n quan ƒë·∫øn Bitcoin ====
def fetch_btc_news():
    """L·∫•y tin t·ª©c m·ªõi nh·∫•t li√™n quan ƒë·∫øn Bitcoin t·ª´ NewsAPI."""
    try:
        url = f"{NEWS_API_URL}?q=bitcoin&sortBy=publishedAt&apiKey={NEWS_API_KEY}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            articles = data.get("articles", [])
            news = [{"title": article["title"], "url": article["url"]} for article in articles[:5]]  # L·∫•y 5 tin t·ª©c ƒë·∫ßu ti√™n
            return news
        else:
            print(f"L·ªói khi l·∫•y tin t·ª©c Bitcoin (HTTP {response.status_code}): {response.text}")
            return []
    except Exception as e:
        print(f"L·ªói khi l·∫•y tin t·ª©c Bitcoin: {e}")
        return []
    
# ==== Hu·∫•n luy·ªán m√¥ h√¨nh Machine Learning ====
def train_ml_model(data):
    """Hu·∫•n luy·ªán m√¥ h√¨nh XGBClassifier d·ª±a tr√™n d·ªØ li·ªáu l·ªãch s·ª≠."""
    try:
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        data["Label"] = (data["close"].shift(-1) > data["close"]).astype(int)  # G√°n nh√£n: 1 n·∫øu gi√° tƒÉng, 0 n·∫øu gi√° gi·∫£m
        features = ["RSI", "MACD", "Signal", "high", "low", "close", "volume"]
        X = data[features].iloc[:-1]  # Lo·∫°i b·ªè h√†ng cu·ªëi v√¨ kh√¥ng c√≥ nh√£n
        y = data["Label"].iloc[:-1]

        # Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model = XGBClassifier(use_label_encoder=False, eval_metric="logloss")
        model.fit(X_train, y_train)

        # ƒê√°nh gi√° m√¥ h√¨nh
        accuracy = accuracy_score(y_test, model.predict(X_test))
        print(f"ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh: {accuracy:.2f}")

        return model
    except Exception as e:
        print("L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh Machine Learning:", e)
        return None

# ==== D·ª± ƒëo√°n xu h∆∞·ªõng b·∫±ng Machine Learning ====
def predict_trend_with_ml(model, data):
    """D·ª± ƒëo√°n xu h∆∞·ªõng th·ªã tr∆∞·ªùng d·ª±a tr√™n m√¥ h√¨nh Machine Learning."""
    try:
        features = ["RSI", "MACD", "Signal", "high", "low", "close", "volume"]
        latest_data = data[features].iloc[-1:]  # L·∫•y h√†ng d·ªØ li·ªáu m·ªõi nh·∫•t
        prediction = model.predict(latest_data)[0]
        return "TƒÇNG üìà" if prediction == 1 else "GI·∫¢M üìâ"
    except Exception as e:
        print("L·ªói khi d·ª± ƒëo√°n xu h∆∞·ªõng b·∫±ng Machine Learning:", e)
        return "Kh√¥ng x√°c ƒë·ªãnh"


# ==== R√∫t g·ªçn n·ªôi dung trong generate_forecast_with_ai ====
def generate_forecast_with_ai(analysis_results, fear_greed, market_cap, volume, news, model=None):
    """T·∫°o l·ªùi d·ª± b√°o h·∫•p d·∫´n b·∫±ng AI."""
    try:
        forecast = "üìä **D·ª± b√°o xu h∆∞·ªõng BTC/USDT** üìä\n\n"
        for interval, result in analysis_results.items():
            trend = classify_trend(result["RSI"], result["MACD"], result["Signal"])
            pivot_points = result["PivotPoints"]
            # ƒê·ªãnh d·∫°ng Pivot Points
            pivot_formatted = (
                f"Pivot: {pivot_points[0]:.2f}, \n\n"
                f"Kh√°ng c·ª± 1: {pivot_points[1]:.2f}, \n"
                f"H·ªó Tr·ª£ 1: {pivot_points[2]:.2f}, \n"
                f"Kh√°ng c·ª± 2: {pivot_points[3]:.2f}, \n"
                f"H·ªó tr·ª£ 2: {pivot_points[4]:.2f} \n"
            )
            # D·ª± ƒëo√°n xu h∆∞·ªõng b·∫±ng Machine Learning (n·∫øu c√≥ m√¥ h√¨nh)
            trend_ml = predict_trend_with_ml(model, prepare_data(fetch_data("BTC/USDT", interval))) if model else "Kh√¥ng x√°c ƒë·ªãnh"

            forecast += (
                f"- **Khung {interval.upper()}**:\n"
                f"  - Xu h∆∞·ªõng (Ch·ªâ b√°o): {trend}\n"
                f"  - Xu h∆∞·ªõng (ML): {trend_ml}\n"
                f"  - Gi√° hi·ªán t·∫°i: {result['Price']:.2f} USDT\n"
                f"  - RSI: {result['RSI']:.2f}\n"
                f"  - MACD: {result['MACD']:.2f}\n"
                f"  - Pivot Points: {pivot_formatted}\n\n"
            )
        forecast += (
            f"üåç **Th√¥ng tin th·ªã tr∆∞·ªùng:**\n"
            f"- Ch·ªâ s·ªë Fear and Greed: {fear_greed[0]} ({fear_greed[1]})\n"
            f"- V·ªën h√≥a th·ªã tr∆∞·ªùng: {market_cap / 1e9:.2f} t·ª∑ USD\n"
            f"- KL d·ªãch 24h: {volume / 1e9:.2f} t·ª∑ USD\n\n"
            f"üì∞ **Tin t·ª©c n·ªïi b·∫≠t:**\n"
        )
        # R√∫t g·ªçn tin t·ª©c ch·ªâ l·∫•y 3 tin ƒë·∫ßu ti√™n
        for item in news[:3]:
            forecast += f"- [{item['title']}]({item['url']})\n"

        forecast += (
            "\n\n---\n"
            "‚ö†Ô∏è **BOT th·ª≠ nghi·ªám b·ªüi @VuThangIT** ‚ö†Ô∏è\n"
            "BOT n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ t·ª± ƒë·ªông ph√¢n t√≠ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng BTC/USDT, \n"
            "ƒê∆∞a ra xu h∆∞·ªõng d·ª± ƒëo√°n d·ª±a tr√™n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t V√† M√¥ h√¨nh h·ªçc m√°y.\n"
            "Cung c·∫•p th√¥ng tin ch·ªâ s·ªë Fear & Greed, v·ªën h√≥a th·ªã tr∆∞·ªùng, kh·ªëi l∆∞·ª£ng giao d·ªãch, "
            "v√† c√°c tin t·ª©c quan tr·ªçng m·ªõi nh·∫•t.\n"
            "‚ö†Ô∏èL∆∞u √Ω, ƒë√¢y ch·ªâ l√† c√¥ng c·ª• h·ªó tr·ª£ tham kh·∫£o."
            "C√¢n nh·∫Øc k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi ƒë·∫ßu t∆∞ v√† t√¨m ƒë·∫øn chuy√™n gia ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n."
        )
        return forecast
    except Exception as e:
        print("L·ªói khi t·∫°o l·ªùi d·ª± b√°o b·∫±ng AI:", e)
        return "Kh√¥ng th·ªÉ t·∫°o l·ªùi d·ª± b√°o."

# ==== G·ª≠i th√¥ng b√°o l√™n Discord ====
def send_forecast_to_discord(forecast):
    """G·ª≠i l·ªùi d·ª± b√°o l√™n Discord, chia nh·ªè n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n k√Ω t·ª±."""
    try:
        # Discord gi·ªõi h·∫°n n·ªôi dung ·ªü 2000 k√Ω t·ª±
        max_length = 2000
        if len(forecast) > max_length:
            # Chia nh·ªè th√¥ng b√°o th√†nh c√°c ph·∫ßn
            parts = [forecast[i:i + max_length] for i in range(0, len(forecast), max_length)]
            for part in parts:
                response = requests.post(DISCORD_WEBHOOK_URL, json={"content": part})
                if response.status_code == 204:
                    print("ƒê√£ g·ª≠i m·ªôt ph·∫ßn d·ª± b√°o l√™n Discord.")
                else:
                    print("L·ªói khi g·ª≠i d·ª± b√°o:", response.status_code, response.text)
        else:
            # G·ª≠i th√¥ng b√°o n·∫øu kh√¥ng v∆∞·ª£t qu√° gi·ªõi h·∫°n
            response = requests.post(DISCORD_WEBHOOK_URL, json={"content": forecast})
            if response.status_code == 204:
                print("ƒê√£ g·ª≠i d·ª± b√°o l√™n Discord th√†nh c√¥ng.")
            else:
                print("L·ªói khi g·ª≠i d·ª± b√°o:", response.status_code, response.text)
    except Exception as e:
        print("L·ªói khi g·ª≠i d·ª± b√°o:", e)

# ==== Main loop ====
if __name__ == "__main__":
    intervals = ["1h", "4h", "1d"]  # C√°c khung th·ªùi gian c·∫ßn ph√¢n t√≠ch
    model = None  # Kh·ªüi t·∫°o m√¥ h√¨nh Machine Learning
    while True:
        analysis_results = analyze_multiple_timeframes("BTC/USDT", intervals)
        if analysis_results:
            fear_greed = fetch_fear_greed()
            market_cap, volume = fetch_market_data()
            news = fetch_btc_news()

            # Hu·∫•n luy·ªán m√¥ h√¨nh n·∫øu ch∆∞a c√≥
            if model is None:
                data = fetch_data("BTC/USDT", "1h")  # L·∫•y d·ªØ li·ªáu khung 1h ƒë·ªÉ hu·∫•n luy·ªán
                prepared_data = prepare_data(data)
                if not prepared_data.empty:
                    model = train_ml_model(prepared_data)

            # T·∫°o l·ªùi d·ª± b√°o
            forecast = generate_forecast_with_ai(analysis_results, fear_greed, market_cap, volume, news, model)
            send_forecast_to_discord(forecast)
        time.sleep(3600)  # G·ª≠i m·ªói 1 ti·∫øng